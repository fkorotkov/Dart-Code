blocks:
  install_packages_mac_linux: &install_packages_mac_linux |
    if [[ "$OS" == "linux" ]]; then
      apt-get update
      apt-get -y install curl wget git ruby2.5 gnupg
      curl -sL https://deb.nodesource.com/setup_8.x | bash -
      apt-get -y install nodejs
      gem install dpl
    fi;
    if [[ "$OS" == "darwin" ]]; then
      brew install node
      sudo gem install dpl
    fi;

  install_packages_win_1: &install_packages_win_1 |
    iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
    choco install -y ruby --no-progress --install-arguments "/verysilent /dir=""c:\tools\ruby"" /tasks=""assocfiles, modpath, noridkinstall""" --override-arguments
    choco install -y nodejs.install --no-progress
  
  # This can't go in the one above, because Chocolatey seems to break PATH (it doesn't add ruby, and
  # it removes the things that were added by Cirrus!). It's fixed for subsequent blocks though.
  install_packages_win_2: &install_packages_win_2 |
    gem install dpl

  install_dart_mac_linux: &install_dart_mac_linux |
    mkdir -p "$DART_PATH"
    cd "$DART_PATH"
    curl https://storage.googleapis.com/dart-archive/channels/$DART_CHANNEL/release/latest/sdk/dartsdk-$DART_OS-x64-release.zip > dart-sdk.zip
    unzip dart-sdk.zip > /dev/null
    mv dart-sdk/* .
    cd "$CIRRUS_WORKING_DIR"

  install_dart_win: &install_dart_win |
    mkdir -p "${env:DART_PATH}"
    cd "${env:DART_PATH}"
    Invoke-WebRequest "https://storage.googleapis.com/dart-archive/channels/${env:DART_CHANNEL}/release/latest/sdk/dartsdk-windows-x64-release.zip" -OutFile "dart.zip"
    Expand-Archive -Path dart.zip -Destination .
    mv dart-sdk/* .
    cd "${env:CIRRUS_WORKING_DIR}"

  install_flutter_mac_linux: &install_flutter_mac_linux |
    mkdir -p "$FLUTTER_PATH"
    cd "$FLUTTER_PATH"
    if [[ "$DART_CHANNEL" == "stable" ]]; then
      export FLUTTER_BRANCH=beta
    else
      export FLUTTER_BRANCH=master
    fi;
    git clone -b $FLUTTER_BRANCH https://github.com/flutter/flutter.git .
    cd "$CIRRUS_WORKING_DIR"
  
  install_flutter_win: &install_flutter_win |
    mkdir -p "${env:FLUTTER_PATH}"
    cd "${env:FLUTTER_PATH}"
    if ($env:DART_CHANNEL -eq "stable") {
      $env:FLUTTER_BRANCH = "beta"
    } else {
      $env:FLUTTER_BRANCH = "master"
    }
    git clone -b ${env:FLUTTER_BRANCH} https://github.com/flutter/flutter.git .
    cd "${env:CIRRUS_WORKING_DIR}"

  vscode_setup_mac_linux: &vscode_setup_mac_linux |
    if [[ "$OS" == "linux" ]]; then
      curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
      mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg
      sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main" > /etc/apt/sources.list.d/vscode.list'
      apt-get update
      apt-get -y install code code-insiders libasound2 libxkbfile-dev pkg-config libsecret-1-dev libxss1 libgconf-2-4 dbus xvfb libgtk-3-0
    fi;
  
  vscode_xvfb_background: &vscode_xvfb_background |
    if [[ "$OS" == "linux" ]]; then
      Xvfb :99
    fi;
  
  pub_cache_mac_linux: &pub_cache_mac_linux
    folder: "$HOME/.pub-cache"
    # Pub cache is unrelated to engine version, but it's a convenient thing that changes now and
    # then which will prevent this cache just growing over time as versions changed.
    fingerprint_script: echo $OS; echo $DART_CHANNEL; cat "$FLUTTER_PATH/bin/internal/engine.version"

  pub_cache_win: &pub_cache_win
    folder: "$APPDATA\\Pub\\Cache"
    # Pub cache is unrelated to engine version, but it's a convenient thing that changes now and
    # then which will prevent this cache just growing over time as versions changed.
    fingerprint_script: ${env:OS}; ${env:DART_CHANNEL}; type "${env:FLUTTER_PATH}\bin\internal\engine.version"

  node_modules_cache_mac_linux: &node_modules_cache_mac_linux
    folder: node_modules
    fingerprint_script: echo $OS; echo $DART_CHANNEL; cat package-lock.json

  node_modules_cache_win: &node_modules_cache_win
    folder: node_modules
    fingerprint_script: ${env:OS}; ${env:DART_CHANNEL}; type package-lock.json

  flutter_cache_mac_linux: &flutter_cache_mac_linux
    folder: "$FLUTTER_PATH/bin/cache"
    fingerprint_script: echo $OS; echo $DART_CHANNEL; cat "$FLUTTER_PATH/bin/internal/engine.version"

  flutter_cache_win: &flutter_cache_win
    folder: "$FLUTTER_PATH\\bin\\cache"
    fingerprint_script: ${env:OS}; ${env:DART_CHANNEL}; type "${env:FLUTTER_PATH}\bin\internal\engine.version"

  # configure_flutter: &configure_flutter |
  #   flutter config --no-analytics
  #   flutter update-packages

  print_versions: &print_versions |
    dart --version
    #flutter --version
    node --version
    npm --version

  # flutter_doctor: &flutter_doctor |
  #   flutter doctor

  install_npm_packages: &install_npm_packages |
    npm install --depth 0 --unsafe-perm
  
  configure_code_climate_mac_linux: &configure_code_climate_mac_linux |
    if [[ "$OS" == "linux" ]]; then
      curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter;
    else
      curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-darwin-amd64 > ./cc-test-reporter;
    fi
    chmod +x ./cc-test-reporter;
    ./cc-test-reporter before-build;

  compile: &compile npm run vscode:prepublish
  lint: &lint npm run lint
  test: &test npm test

  ensure_no_dart_processes_mac_linux: &ensure_no_dart_processes_mac_linux |
    ps -ax | grep -v grep | grep dart || true
    if [[ $(pgrep -x dart) ]]; then
      echo 'DART WAS FOUND'
      fail()
    fi;

  ensure_no_dart_processes_win: &ensure_no_dart_processes_win |
    Get-WmiObject Win32_Process -Filter "name = 'dart.exe'" | Select-Object CommandLine
    if (get-process dart -ErrorAction SilentlyContinue) {
      throw "Dart processes were still running"
    }

  upload_logs_mac_linux: &upload_logs_mac_linux |
    if [[ "$CIRRUS_PR" = "" ]]; then
      dpl --provider=s3 --bucket="test-results.dartcode.org" --skip_cleanup=true --local-dir=".test_results" --upload-dir="$CIRRUS_BRANCH/$CIRRUS_CHANGE_IN_REPO/$OS" --acl=public_read --default_text_charset=utf-8;
      dpl --provider=s3 --bucket="test-results.dartcode.org" --skip_cleanup=true --local-dir=".dart_code_test_logs" --upload-dir="logs/$CIRRUS_BRANCH/$CIRRUS_CHANGE_IN_REPO/$OS" --acl=public_read --default_text_charset=utf-8;
    fi;

  upload_logs_win: &upload_logs_win |
    if (-not ($env:CIRRUS_PR)) {
      cmd.exe /c "dpl --provider=s3 --bucket=test-results.dartcode.org --skip_cleanup=true --local-dir=.test_results --upload-dir=${env:CIRRUS_BRANCH}/${env:CIRRUS_CHANGE_IN_REPO}/${env:OS} --acl=public_read --default_text_charset=utf-8"
      cmd.exe /c "dpl --provider=s3 --bucket=test-results.dartcode.org --skip_cleanup=true --local-dir=.dart_code_test_logs --upload-dir=logs/${env:CIRRUS_BRANCH}/${env:CIRRUS_CHANGE_IN_REPO}/${env:OS} --acl=public_read --default_text_charset=utf-8"
    }

  upload_code_coverage_mac_linux: &upload_code_coverage_mac_linux |
    if [[ "$CODE_VERSION" == "stable" ]] && [[ "$DART_CHANNEL" == "stable" ]]; then
      ./cc-test-reporter after-build --prefix ../../;
    fi;

env:
  AWS_ACCESS_KEY_ID: ENCRYPTED[19600ef6da68a544b43be5b8a03da226b09d6aabeda0c204d380d548876cdd8638e3537290ce04f7922f67eb04d105f5]
  AWS_SECRET_ACCESS_KEY: ENCRYPTED[56029ff5b0d2b0ca50831d1f070a4cd9cc687030ca6c226ff4ed72836f2de59cf937ca96b4bedd9b4dbcac54fddcdc8e]
  CC: ENCRYPTED[b73f2f7be9a54bc508f796fda3afda84015d6afa42004cc278b65bb51bba1d9a80679567d58b01847a8421e34f64e1d1]

allow_failures: $DART_CHANNEL == 'dev' || $CODE_VERSION == 'insiders'

# task:
#   env:
#     DART_PATH: "/tmp/with spaces/dart"
#     FLUTTER_PATH: "/tmp/with spaces/flutter"
#     PATH: "$FLUTTER_PATH/bin:$DART_PATH/bin:$PATH"
#     DEBIAN_FRONTEND: noninteractive
#     ELECTRON_NO_ATTACH_CONSOLE: 1
#     CXX: "g++-4.8"
#     CC: "gcc-4.8" 
#     DISPLAY: ":99.0"

#   matrix:
#     # - name: Linux
#     #   container:
#     #     image: ubuntu:bionic
#     #   env:
#     #     DART_OS: linux
#     #     matrix:
#     #       DART_CHANNEL: stable
#     #       DART_CHANNEL: dev
#     #     matrix:
#     #       CODE_VERSION: stable
#     #       CODE_VERSION: insiders
#     - name: Mac
#       osx_instance:
#         image: high-sierra-base
#       env:
#         DART_OS: macos
#         matrix:
#           DART_CHANNEL: stable
#           DART_CHANNEL: dev
#         matrix:
#           CODE_VERSION: stable
#           CODE_VERSION: insiders
  
#   install_packages_script:         *install_packages_mac_linux
#   vscode_setup_script:             *vscode_setup_mac_linux
#   vscode_xvfb_background_script:   *vscode_xvfb_background
#   install_dart_script:             *install_dart_mac_linux
#   install_flutter_script:          *install_flutter_mac_linux
#   pub_cache:                       *pub_cache_mac_linux
#   node_modules_cache:              *node_modules_cache_mac_linux
#   flutter_cache:                   *flutter_cache_mac_linux
#   configure_flutter_script:        *configure_flutter
#   print_versions_script:           *print_versions
#   flutter_doctor_script:           *flutter_doctor
#   install_npm_packages_script:     *install_npm_packages
#   configure_code_climate_script:   *configure_code_climate_mac_linux
#   compile_script:                  *compile
#   lint_script:                     *lint
#   test_script:                     *test
#   ensure_no_dart_processes_script: *ensure_no_dart_processes_mac_linux
#   upload_logs_script:              *upload_logs_mac_linux
#   upload_code_coverage_script:     *upload_code_coverage_mac_linux


task:
  env:
    CIRRUS_SHELL: powershell
    DART_PATH: "C:\\Windows\\Temp\\with spaces\\dart"
    FLUTTER_PATH: "C:\\Windows\\Temp\\with spaces\\flutter"
    PATH: "$FLUTTER_PATH\\bin;$DART_PATH\\bin;$ALLUSERSPROFILE\\chocolatey\\bin;C:\\Program Files\\nodejs;C:\\tools\\ruby\\bin;$PATH"
    
  matrix:
    - name: Windows
      windows_container:
        image: cirrusci/windowsservercore:2016
      env:
        DART_OS: win
        matrix:
          DART_CHANNEL: stable
          DART_CHANNEL: dev
        matrix:
          CODE_VERSION: stable
          CODE_VERSION: insiders

  install_packages_1_script:       *install_packages_win_1
  install_packages_2_script:       *install_packages_win_2
  install_dart_script:             *install_dart_win
  #install_flutter_script:          *install_flutter_win
  #pub_cache:                       *pub_cache_win
  node_modules_cache:              *node_modules_cache_win
  #flutter_cache:                   *flutter_cache_win
  # configure_flutter_script:        *configure_flutter
  print_versions_script:           *print_versions
  #flutter_doctor_script:           *flutter_doctor
  install_npm_packages_script:     *install_npm_packages
  compile_script:                  *compile
  lint_script:                     *lint
  test_script:                     *test
  ensure_no_dart_processes_script: *ensure_no_dart_processes_win
  upload_logs_script:              *upload_logs_win
